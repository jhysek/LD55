[gd_scene load_steps=5 format=2]

[sub_resource type="Shader" id=25]
code = "shader_type canvas_item;

// Amount of detail.
uniform int octaves = 4;

// Opacity of the output fog.
uniform float starting_amplitude: hint_range(0.0, 0.5) = 0.5;

// Rate of pattern within the fog.
uniform float starting_frequency = 1.0;

// Shift towards transparency (clamped) for sparser fog.
uniform float shift: hint_range(-1.0, 0.0) = -0.2;

// Direction and speed of travel.
uniform vec2 velocity = vec2(1.0, 1.0);

// Color of the fog.
uniform vec4 fog_color: hint_color = vec4(0.0, 0.0, 0.0, 1.0);

// Noise texture; OpenSimplexNoise is great, but any filtered texture is fine.
uniform sampler2D noise;

float rand(vec2 uv) {
	float amplitude = starting_amplitude;
	float frequency = starting_frequency;
	float output = 0.0;
	for (int i = 0; i < 4; i++) {
		output += texture(noise, uv * frequency).x * amplitude;
		amplitude /= 2.0;
		frequency *= 2.0;
	}
	return clamp(output + shift, 0.0, 1.0);
}

void fragment() {
	vec2 motion = vec2(rand(UV + TIME * starting_frequency * velocity));
	COLOR = mix(vec4(0.0), fog_color, rand(UV + motion));
}"

[sub_resource type="OpenSimplexNoise" id=26]

[sub_resource type="NoiseTexture" id=27]
seamless = true
as_normalmap = true
bump_strength = 23.5
noise = SubResource( 26 )

[sub_resource type="ShaderMaterial" id=28]
shader = SubResource( 25 )
shader_param/octaves = 4
shader_param/starting_amplitude = 0.332
shader_param/starting_frequency = 1.0
shader_param/shift = -0.011
shader_param/velocity = Vector2( 0, -0.05 )
shader_param/fog_color = Color( 0, 0, 0, 1 )
shader_param/noise = SubResource( 27 )

[node name="Fog" type="ColorRect"]
material = SubResource( 28 )
margin_left = -3424.0
margin_top = -1001.0
margin_right = 4608.0
margin_bottom = 2483.0
